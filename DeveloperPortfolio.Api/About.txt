The steps to create this solution:

1. Create the Balzor WebAssembly project (later on referred to as Web).

2. Create the ASP.NET Core Web API project (later on referred to as Api).

3. Add the Entities folder to Api.

4. Add the following classes to the Entities folder in Api:
	- Project
	- Category
	- Tech
	- Link
	- ProjectTechRelation (used to associate projects with the technologies it uses)

5. Add solution to version control (Git) and create the DeveloperPortfolio repo on Github.

6. Install the following packages in the Dependencies folder in Api:
	- Microsoft.EntityFrameworkCore.SqlServer 
	- Microsoft.EntityFrameworkCore.Tools

7. Create the Data folder in Api and add the DeveloperPortfolioDbContext class that inherits DbContext to it.

8. Override the OnModelCreating method in the DeveloperPortfolioDbContext class to seed the database.
   Also create a DbSet property for each entity to let Entity Framework know about them.

9. Register the DeveloperPortfolioDbContext for dependency injection in the Program class.

10. Create the DeveloperPortfolioDB database in SQLServer and get the connection string.

11. Run a migration and update the database to add the tables to the database.

12. Add a Class Library project to the solution for the Data Transfer Object (dto) classes.
    Name it DeveloperPortfolio.Models (later on referred to as Models).

13. Create the Dtos folder in Models and add the Data Transfer Object (dto) classes to it.

14. Add the Repositories folder to Api. Create the Contracts folder in it and add the IProjectRepository 
    interface to it. Implement the ProjectRepository class that implements the interface.

15. Register the ProjectRepository class for dependency injection in the Program class.

16. Add Models to the Dependencies folder in Api.

17. Add and implement the ProjectController class.

18. Create the Extensions folder in Api and add the DtoConversions class to it with methods that will be used
	to convert data to dtos.

19. In Web in the Program class set the BaseAddress of the HttpClient to https://localhost:7110/. 
	This is where the server runs locally.

20. In Web create the Services folder for classes to handle interactions with the Web API component.

21. Inside the Services folder create the Contracts folder and add the IProjectService to it.

22. Create the ProjectService class in the Services folder that implements the IProjectService interface.

23. Implement the GetAllProjects method in ProjectService to retrieve all the projects from server to client.

24. Add the Projects.razor and ProjectsBase classes to the Pages folder in Web. This is going to be the page
	where all projects will be displayed.

25. Inject IProjectService to ProjectsBase. Also, register IProjectService for dependecy injection 
	in the Program class.

26. In ProjectsBase override the OnInitializedAsync method to retrieve the Projects data.

27. Implement the Project.razor component.

28. Add CORS policy code to the Program class in Api.

29. Add a migration and update the database to fix some project tech relations that were entered wrong
	the first time.

30. Abstract the razor code for projects display into a separate Blazor component. To do that add the 
	DisplayProjects component and the DisplayProjectsBase class.

31. Add a style sheet to the DisplayProjects component.

32. Implement getting a single project (repository, controller, service).

33. Create the ProjectDetails razor component and the corresponding base class.

34. Create the DisplayError razor component.

35. Create the LoadingSpinner razor component.

36. Add the Components folder to Web and move to it the components that are not going to be pages.
	Add the using directive to _Imports.razor.

37. Add the CreateCategory method to IProjectRepository and implement it in ProjectRepository.

38. Create the category and tech repositories, controllers and services and move the code that respectively
	concerns categories and techs to them. Also add code to retrieve all categories/techs and a single
	category/tech.

39. Add the CreateCategory page and implement adding a new category in Api and Web.

40. Add the CreateTech page and implement adding a new tech in Api and Web.

41. Add the CreateProject page, the AddLink and DisplayLink components and implement adding a new project 
	in Api and Web.

42. Add the EditProjects page and the DisplayEditProjects component.

43. Add the methods and pages for the EditCategories and EditTechs pages and the pages themselves.

44. 



